{"version":3,"sources":["main.js"],"names":["console","log","gsap","registerPlugin","ScrollTrigger","sections","utils","toArray","NUM_PANELS","PANEL_RATIO","experienceWrapper","document","querySelector","experience","experiencePadder","panels","querySelectorAll","timeline","duration","paused","resizeStuff","onePanelHeight","offsetHeight","onePanelWidth","style","width","forEach","panel","height","window","addEventListener","topLimit","getBoundingClientRect","top","left","percent","progress"],"mappings":";;AAAAA,OAAO,CAACC,GAAR;AAIAC,IAAI,CAACC,cAAL,CAAoBC,aAApB;AAEA,IAAIC,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAWC,OAAX,CAAmB,QAAnB,CAAf;AAEA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,WAAW,GAAG,KAAK,CAAzB;AAEA,IAAMC,iBAAiB,GAAGC,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,CAA1B;AACA,IAAMC,UAAU,GAAGH,iBAAiB,CAACE,aAAlB,CAAgC,aAAhC,CAAnB;AACA,IAAME,gBAAgB,GAAGJ,iBAAiB,CAACE,aAAlB,CAAgC,oBAAhC,CAAzB;AACA,IAAMG,MAAM,GAAGL,iBAAiB,CAACM,gBAAlB,CAAmC,QAAnC,CAAf;AACA,IAAMC,QAAQ,GAAGf,IAAI,CAACe,QAAL,CAAc;AAAEC,EAAAA,QAAQ,EAAE,GAAZ;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CAAd,CAAjB,C,CAAiE;;AAEjE,IAAIC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACvB,MAAIC,cAAc,GAAGN,MAAM,CAAC,CAAD,CAAN,CAAUO,YAA/B,CADuB,CACsB;;AAC7C,MAAIC,aAAa,GAAGF,cAAc,GAAGZ,WAArC,CAFuB,CAE2B;;AAClDI,EAAAA,UAAU,CAACW,KAAX,CAAiBC,KAAjB,GAAyBF,aAAa,GAAGf,UAAhB,GAA6B,IAAtD,CAHuB,CAGqC;;AAC5DO,EAAAA,MAAM,CAACW,OAAP,CAAe,UAACC,KAAD,EAAW;AACzBA,IAAAA,KAAK,CAACH,KAAN,CAAYC,KAAZ,GAAoBF,aAAa,GAAG,IAApC,CADyB,CACiB;AAC1C,GAFD;AAGAT,EAAAA,gBAAgB,CAACU,KAAjB,CAAuBI,MAAvB,GAAgCL,aAAa,GAAGf,UAAhB,GAA6B,IAA7D,CAPuB,CAO4C;AACnE,CARD;;AAUAqB,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,WAAlC;AACAS,MAAM,CAACC,gBAAP,CAAwB,mBAAxB,EAA6CV,WAA7C;AACAA,WAAW;AAEXS,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACvC,MAAIC,QAAQ,GAAGrB,iBAAiB,CAACsB,qBAAlB,GAA0CC,GAAzD;AACAjC,EAAAA,OAAO,CAACC,GAAR,CAAY8B,QAAZ;;AACA,MAAIA,QAAQ,GAAG,CAAf,EAAkB;AACjBlB,IAAAA,UAAU,CAACW,KAAX,CAAiBS,GAAjB,GAAuB,CAACF,QAAD,GAAY,IAAnC,CADiB,CACwB;;AACzClB,IAAAA,UAAU,CAACW,KAAX,CAAiBU,IAAjB,GAAwBH,QAAQ,GAAG,IAAnC,CAFiB,CAEwB;AACzC,GAHD,MAGO;AACNlB,IAAAA,UAAU,CAACW,KAAX,CAAiBS,GAAjB,GAAuB,IAAI,IAA3B;AACA;;AACD,MAAIE,OAAO,GACV,CAACJ,QAAD,IAAajB,gBAAgB,CAACQ,YAAjB,GAAgCP,MAAM,CAAC,CAAD,CAAN,CAAUO,YAAvD,CADD;AAEAL,EAAAA,QAAQ,CAACmB,QAAT,CAAkBD,OAAlB;AACA,CAZD,E,CAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["console.log(`Hello World from main.js! \nChange this message, and make sure it changes in the browser \nto verify that you're working in the right files.`);\n\ngsap.registerPlugin(ScrollTrigger);\n\nlet sections = gsap.utils.toArray('.panel');\n\nconst NUM_PANELS = 6;\nconst PANEL_RATIO = 16 / 9;\n\nconst experienceWrapper = document.querySelector('.experience-wrapper');\nconst experience = experienceWrapper.querySelector('.experience');\nconst experiencePadder = experienceWrapper.querySelector('.experience-padder');\nconst panels = experienceWrapper.querySelectorAll('.panel');\nconst timeline = gsap.timeline({ duration: 100, paused: true }); // set up a 100s timeline\n\nlet resizeStuff = () => {\n\tlet onePanelHeight = panels[0].offsetHeight; // just ask the first panel how tall it is, to find what CSS has currently calculated its height to be\n\tlet onePanelWidth = onePanelHeight * PANEL_RATIO; // figure out what its width should be to maintain the chosen ratio\n\texperience.style.width = onePanelWidth * NUM_PANELS + 'px'; // set the whole sideways scrolling thing to NUM_PANELS times the width of one panel\n\tpanels.forEach((panel) => {\n\t\tpanel.style.width = onePanelWidth + 'px'; // set the panels to that single panel width too\n\t});\n\texperiencePadder.style.height = onePanelWidth * NUM_PANELS + 'px'; // set the hidden padding element to be tall enough that we can scroll down through NUM_PANELS worth of panels\n};\n\nwindow.addEventListener('resize', resizeStuff);\nwindow.addEventListener('orientationchange', resizeStuff);\nresizeStuff();\n\nwindow.addEventListener('scroll', () => {\n\tlet topLimit = experienceWrapper.getBoundingClientRect().top;\n\tconsole.log(topLimit);\n\tif (topLimit < 0) {\n\t\texperience.style.top = -topLimit + 'px'; // keeps the panels in place\n\t\texperience.style.left = topLimit + 'px'; // keeps the panels in place\n\t} else {\n\t\texperience.style.top = 0 + 'px';\n\t}\n\tlet percent =\n\t\t-topLimit / (experiencePadder.offsetHeight - panels[0].offsetHeight);\n\ttimeline.progress(percent);\n});\n\n// gsap animations\n\n// put a tween on the timeline\n// timeline.to(\n// \t['.painting', '.table', '.man', '.gun', '.news'],\n// \t{\n// \t\tduration: 2, // takes 2 seconds\n// \t\tleft: '50%',\n// \t\ttop: '50%',\n// \t},\n// \t1\n// ); // starts at the 1 second mark\n"],"file":"main.js"}